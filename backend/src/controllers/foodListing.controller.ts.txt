import { Request, Response } from 'express';
import { FoodListing, IFoodListing } from '../models/FoodListing';
import { IUser } from '../models/User';

interface AuthRequest extends Request {
  user?: IUser;
}

export const createFoodListing = async (req: AuthRequest, res: Response) => {
  try {
    const foodListing = await FoodListing.create({
      ...req.body,
      provider: req.user?._id,
    });

    res.status(201).json({
      success: true,
      data: foodListing,
    });
  } catch (error) {
    res.status(400).json({
      success: false,
      error: 'Invalid food listing data',
    });
  }
};

export const getFoodListings = async (req: Request, res: Response) => {
  try {
    const { status, category, dietary } = req.query;
    const filter: any = {};

    if (status) filter.status = status;
    if (category) filter.category = category;
    if (dietary) filter.dietary = dietary;

    const foodListings = await FoodListing.find(filter)
      .populate('provider', 'name organization')
      .sort('-createdAt');

    res.json({
      success: true,
      count: foodListings.length,
      data: foodListings,
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      error: 'Server error',
    });
  }
};

export const getFoodListing = async (req: Request, res: Response) => {
  try {
    const foodListing = await FoodListing.findById(req.params.id).populate(
      'provider',
      'name organization address phone'
    );

    if (!foodListing) {
      return res.status(404).json({
        success: false,
        error: 'Food listing not found',
      });
    }

    res.json({
      success: true,
      data: foodListing,
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      error: 'Server error',
    });
  }
};

export const updateFoodListing = async (req: AuthRequest, res: Response) => {
  try {
    let foodListing = await FoodListing.findById(req.params.id);

    if (!foodListing) {
      return res.status(404).json({
        success: false,
        error: 'Food listing not found',
      });
    }

    // Make sure user is the food listing provider
    if (foodListing.provider.toString() !== req.user?._id.toString()) {
      return res.status(401).json({
        success: false,
        error: 'Not authorized to update this listing',
      });
    }

    foodListing = await FoodListing.findByIdAndUpdate(req.params.id, req.body, {
      new: true,
      runValidators: true,
    });

    res.json({
      success: true,
      data: foodListing,
    });
  } catch (error) {
    res.status(400).json({
      success: false,
      error: 'Invalid food listing data',
    });
  }
};

export const deleteFoodListing = async (req: AuthRequest, res: Response) => {
  try {
    const foodListing = await FoodListing.findById(req.params.id);

    if (!foodListing) {
      return res.status(404).json({
        success: false,
        error: 'Food listing not found',
      });
    }

    // Make sure user is the food listing provider
    if (foodListing.provider.toString() !== req.user?._id.toString()) {
      return res.status(401).json({
        success: false,
        error: 'Not authorized to delete this listing',
      });
    }

    await foodListing.remove();

    res.json({
      success: true,
      data: {},
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      error: 'Server error',
    });
  }
};

export const reserveFoodListing = async (req: AuthRequest, res: Response) => {
  try {
    const foodListing = await FoodListing.findById(req.params.id);

    if (!foodListing) {
      return res.status(404).json({
        success: false,
        error: 'Food listing not found',
      });
    }

    if (foodListing.status !== 'available') {
      return res.status(400).json({
        success: false,
        error: 'Food listing is not available',
      });
    }

    foodListing.status = 'reserved';
    foodListing.recipient = req.user?._id;
    foodListing.reservedAt = new Date();

    await foodListing.save();

    res.json({
      success: true,
      data: foodListing,
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      error: 'Server error',
    });
  }
};

export const completeFoodListing = async (req: AuthRequest, res: Response) => {
  try {
    const foodListing = await FoodListing.findById(req.params.id);

    if (!foodListing) {
      return res.status(404).json({
        success: false,
        error: 'Food listing not found',
      });
    }

    if (foodListing.status !== 'reserved') {
      return res.status(400).json({
        success: false,
        error: 'Food listing must be reserved first',
      });
    }

    if (foodListing.recipient?.toString() !== req.user?._id.toString()) {
      return res.status(401).json({
        success: false,
        error: 'Not authorized to complete this listing',
      });
    }

    foodListing.status = 'completed';
    foodListing.completedAt = new Date();

    await foodListing.save();

    res.json({
      success: true,
      data: foodListing,
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      error: 'Server error',
    });
  }
};

export const getNearbyFoodListings = async (req: Request, res: Response) => {
  try {
    const { latitude, longitude, maxDistance = 10000 } = req.query; // maxDistance in meters

    if (!latitude || !longitude) {
      return res.status(400).json({
        success: false,
        error: 'Please provide latitude and longitude',
      });
    }

    const foodListings = await FoodListing.find({
      status: 'available',
      'pickupAddress.coordinates': {
        $near: {
          $geometry: {
            type: 'Point',
            coordinates: [parseFloat(longitude as string), parseFloat(latitude as string)],
          },
          $maxDistance: parseInt(maxDistance as string),
        },
      },
    }).populate('provider', 'name organization');

    res.json({
      success: true,
      count: foodListings.length,
      data: foodListings,
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      error: 'Server error',
    });
  }
}; 
