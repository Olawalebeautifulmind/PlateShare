import React, { useState, useEffect } from 'react';
import {
  Container,
  Paper,
  Typography,
  Grid,
  Card,
  CardContent,
  Box,
  Button,
  Tabs,
  Tab,
} from '@mui/material';

interface TabPanelProps {
  children?: React.ReactNode;
  index: number;
  value: number;
}

interface UserProfile {
  name: string;
  email: string;
  role: string;
  address: string;
  phone: string;
}

interface FoodListing {
  id: number;
  title: string;
  quantity: string;
  expiryDate: string;
  status: string;
}

function TabPanel(props: TabPanelProps) {
  const { children, value, index, ...other } = props;

  return (
    <div
      role="tabpanel"
      hidden={value !== index}
      id={`simple-tabpanel-${index}`}
      aria-labelledby={`simple-tab-${index}`}
      {...other}
    >
      {value === index && <Box sx={{ p: 3 }}>{children}</Box>}
    </div>
  );
}

const Dashboard: React.FC = () => {
  const [value, setValue] = useState(0);
  const [userProfile, setUserProfile] = useState<UserProfile | null>(null);
  const [foodListings, setFoodListings] = useState<FoodListing[]>([]);

  useEffect(() => {
    // Fetch user profile and food listings
    // This will be implemented when backend is connected
    setUserProfile({
      name: 'Sample Organization',
      email: 'sample@org.com',
      role: 'provider',
      address: '123 Main St, City, State',
      phone: '(555) 123-4567',
    });

    setFoodListings([
      {
        id: 1,
        title: 'Fresh Vegetables',
        quantity: '10 kg',
        expiryDate: '2024-04-01',
        status: 'available',
      },
      // Add more sample listings as needed
    ]);
  }, []);

  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {
    setValue(newValue);
  };

  if (!userProfile) {
    return (
      <Container>
        <Typography>Loading...</Typography>
      </Container>
    );
  }

  return (
    <Container maxWidth="lg" sx={{ mt: 4, mb: 4 }}>
      <Grid container spacing={3}>
        <Grid item xs={12}>
          <Paper sx={{ p: 3 }}>
            <Typography variant="h4" gutterBottom>
              Dashboard
            </Typography>
            <Box sx={{ borderBottom: 1, borderColor: 'divider', mb: 3 }}>
              <Tabs value={value} onChange={handleTabChange}>
                <Tab label="Profile" />
                <Tab label="Food Listings" />
              </Tabs>
            </Box>

            <TabPanel value={value} index={0}>
              <Grid container spacing={3}>
                <Grid item xs={12} md={6}>
                  <Card>
                    <CardContent>
                      <Typography variant="h6" gutterBottom>
                        Organization Information
                      </Typography>
                      <Typography>Name: {userProfile.name}</Typography>
                      <Typography>Email: {userProfile.email}</Typography>
                      <Typography>Role: {userProfile.role}</Typography>
                      <Typography>Address: {userProfile.address}</Typography>
                      <Typography>Phone: {userProfile.phone}</Typography>
                      <Button
                        variant="contained"
                        color="primary"
                        sx={{ mt: 2 }}
                      >
                        Edit Profile
                      </Button>
                    </CardContent>
                  </Card>
                </Grid>
              </Grid>
            </TabPanel>

            <TabPanel value={value} index={1}>
              <Grid container spacing={3}>
                {foodListings.map((listing) => (
                  <Grid item xs={12} md={6} key={listing.id}>
                    <Card>
                      <CardContent>
                        <Typography variant="h6">{listing.title}</Typography>
                        <Typography>Quantity: {listing.quantity}</Typography>
                        <Typography>
                          Expiry Date: {listing.expiryDate}
                        </Typography>
                        <Typography>Status: {listing.status}</Typography>
                        <Button
                          variant="outlined"
                          color="primary"
                          sx={{ mt: 2, mr: 1 }}
                        >
                          Edit
                        </Button>
                        <Button
                          variant="outlined"
                          color="error"
                          sx={{ mt: 2 }}
                        >
                          Delete
                        </Button>
                      </CardContent>
                    </Card>
                  </Grid>
                ))}
              </Grid>
            </TabPanel>
          </Paper>
        </Grid>
      </Grid>
    </Container>
  );
};

export default Dashboard; 